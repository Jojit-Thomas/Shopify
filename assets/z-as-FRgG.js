const AppSectionsJS = (function () { let isMobile = false; let refreshValue = false; function init() { refreshValue = false; isMobileDevice(); initTriggeredAnimation(refreshValue); initReveal(); window.addEventListener('scroll', reveal); initVideoContainers(); initParallaxEffect(); } function refresh() { refreshValue = true; isMobileDevice(); initTriggeredAnimation(refreshValue); initReveal(); window.addEventListener('scroll', reveal); initVideoContainers(); initParallaxEffect(); } function resize() { const newIsMobile = window.innerWidth <= 768; reveal(); if (newIsMobile !== isMobile) { isMobile = newIsMobile; refreshValue = true; initTriggeredAnimation(refreshValue); initParallaxEffect(); } } function isMobileDevice() { if (window.innerWidth <= 768) { isMobile = true; } else { isMobile = false; } } function isAtLeast100pxVisible(element) { var rect = element.getBoundingClientRect(); var windowHeight = window.innerHeight || document.documentElement.clientHeight; var visibleTop = Math.max(rect.top, 0); var visibleBottom = Math.min(rect.bottom, windowHeight); var visibleHeight = visibleBottom - visibleTop; var elementHeight = rect.bottom - rect.top; return visibleHeight >= Math.min(100, elementHeight); } function isAtLeast100pxOutOfView(element) { var rect = element.getBoundingClientRect(); var windowHeight = window.innerHeight || document.documentElement.clientHeight; var elementHeight = rect.bottom - rect.top; var threshold = Math.min(100, elementHeight); return (rect.bottom < -threshold) || (rect.top > windowHeight + threshold); } function reveal() { var attribute = isMobile ? 'appsections-anim-scroll-mob' : 'appsections-anim-scroll-desk'; var elements = document.querySelectorAll(`*[${attribute}]`); elements.forEach(function(element) { var varClass = element.getAttribute(attribute); var animateOnce = getCSSVariableValue('--as-PhzP') === 'true'; if (isAtLeast100pxVisible(element)) { element.classList.add(varClass, 'visible'); if (animateOnce) { element.removeAttribute(attribute); } } else if (isAtLeast100pxOutOfView(element) && !animateOnce) { element.classList.remove(varClass, 'visible'); } }); } function initReveal() { setTimeout(() => { reveal(); }, 50); } function getCSSVariableValue(variable) { return getComputedStyle(document.documentElement).getPropertyValue(variable); } function initTriggeredAnimation(refreshValue = false) { var configurations = [ { attribute: 'appsections-style-anim-media-desk-0', trigger: getCSSVariableValue('--as-XCLu'), device: 'desktop', class: getCSSVariableValue('--as-EZVT') + '-' + getCSSVariableValue('--as-BPTc') }, { attribute: 'appsections-style-anim-media-mob-0', trigger: getCSSVariableValue('--as-XCLu'), device: 'mobile', class: getCSSVariableValue('--as-EZVT') + '-' + getCSSVariableValue('--as-BPTc') }, { attribute: 'appsections-style-anim-media-desk-1', trigger: getCSSVariableValue('--as-JndX'), device: 'desktop', class: getCSSVariableValue('--as-Kwqk') + '-' + getCSSVariableValue('--as-WZuy') }, { attribute: 'appsections-style-anim-media-mob-1', trigger: getCSSVariableValue('--as-JndX'), device: 'mobile', class: getCSSVariableValue('--as-Kwqk') + '-' + getCSSVariableValue('--as-WZuy') }, { attribute: 'appsections-style-anim-container-desk-0', trigger: getCSSVariableValue('--as-UNdb'), device: 'desktop', class: getCSSVariableValue('--as-UyMD') + '-' + getCSSVariableValue('--as-WJJC') }, { attribute: 'appsections-style-anim-container-mob-0', trigger: getCSSVariableValue('--as-UNdb'), device: 'mobile', class: getCSSVariableValue('--as-UyMD') + '-' + getCSSVariableValue('--as-WJJC') }, { attribute: 'appsections-style-anim-container-desk-1', trigger: getCSSVariableValue('--as-FuSq'), device: 'desktop', class: getCSSVariableValue('--as-GivN') + '-' + getCSSVariableValue('--as-UBkg') }, { attribute: 'appsections-style-anim-container-mob-1', trigger: getCSSVariableValue('--as-FuSq'), device: 'mobile', class: getCSSVariableValue('--as-GivN') + '-' + getCSSVariableValue('--as-UBkg') }, { attribute: 'appsections-style-anim-button-desk-0', trigger: getCSSVariableValue('--as-Wcgz'), device: 'desktop', class: getCSSVariableValue('--as-HkCo') + '-' + getCSSVariableValue('--as-LJao') }, { attribute: 'appsections-style-anim-button-mob-0', trigger: getCSSVariableValue('--as-Wcgz'), device: 'mobile', class: getCSSVariableValue('--as-HkCo') + '-' + getCSSVariableValue('--as-LJao') }, { attribute: 'appsections-style-anim-button-desk-1', trigger: getCSSVariableValue('--as-TCJG'), device: 'desktop', class: getCSSVariableValue('--as-Nmkx') + '-' + getCSSVariableValue('--as-PaYY') }, { attribute: 'appsections-style-anim-button-mob-1', trigger: getCSSVariableValue('--as-TCJG'), device: 'mobile', class: getCSSVariableValue('--as-Nmkx') + '-' + getCSSVariableValue('--as-PaYY') }, { attribute: 'appsections-style-anim-text-desk-0', trigger: getCSSVariableValue('--as-QZrD'), device: 'desktop', class: getCSSVariableValue('--as-NnMv') + '-' + getCSSVariableValue('--as-GHyb') }, { attribute: 'appsections-style-anim-text-mob-0', trigger: getCSSVariableValue('--as-QZrD'), device: 'mobile', class: getCSSVariableValue('--as-NnMv') + '-' + getCSSVariableValue('--as-GHyb') }, { attribute: 'appsections-style-anim-text-desk-1', trigger: getCSSVariableValue('--as-KLnP'), device: 'desktop', class: getCSSVariableValue('--as-GGwB') + '-' + getCSSVariableValue('--as-Svku') }, { attribute: 'appsections-style-anim-text-mob-1', trigger: getCSSVariableValue('--as-KLnP'), device: 'mobile', class: getCSSVariableValue('--as-GGwB') + '-' + getCSSVariableValue('--as-Svku') } ]; function removeExistingClasses(configs) { configs.forEach(function(config) { if (config.class !== "-") { var elements = document.querySelectorAll(`.${config.class}`); elements.forEach(function(element) { element.classList.remove(config.class); }); } }); } if (refreshValue) { removeExistingClasses(configurations); } const eventHandlers = { click: handleClick, hover: handleHover, attention: handleAttention }; configurations = configurations.filter(config => config.device === (isMobile ? 'mobile' : 'desktop')); configurations.forEach(function(config) { var elements = document.querySelectorAll(`*[${config.attribute}]`); elements.forEach(function(element) { var varClass = element.getAttribute(config.attribute); element.classList.add(varClass); var effectClass = config.class; if (eventHandlers[config.trigger]) { element.classList.remove(effectClass); eventHandlers[config.trigger](element, effectClass); } }); }); } function handleClick(element, effectClass) { const forceReflow = (element) => { void element.offsetWidth; }; const doesClassExist = (className) => { const testElement = document.createElement('div'); testElement.classList.add(className); document.body.appendChild(testElement); const hasEffect = !!getComputedStyle(testElement).animationName && getComputedStyle(testElement).animationName !== 'none'; document.body.removeChild(testElement); return hasEffect; }; let isAnimating = false; element.addEventListener('click', function() { if (isAnimating) return; isAnimating = true; const effectReverseClass = `${effectClass}-effectReverse`; element.classList.add(effectClass); const onInitialAnimationEnd = () => { element.classList.remove(effectClass); forceReflow(element); if (doesClassExist(effectReverseClass)) { element.classList.add(effectReverseClass); element.addEventListener('animationend', onReverseAnimationEnd); } else { isAnimating = false; } element.removeEventListener('animationend', onInitialAnimationEnd); }; const onReverseAnimationEnd = () => { element.classList.remove(effectReverseClass); element.removeEventListener('animationend', onReverseAnimationEnd); isAnimating = false; }; element.addEventListener('animationend', onInitialAnimationEnd); }); }; function handleHover(element, effectClass) { element.addEventListener('mouseenter', function() { this.classList.add(effectClass); }); element.addEventListener('mouseleave', function() { this.classList.remove(effectClass); }); }; function handleAttention(element, effectClass) { element.classList.add(effectClass); }; function initVideoContainers() { const containers = document.querySelectorAll(".as-AXpX"); containers.forEach((container) => { const blockType = container.getAttribute(`block-type`) || 'none'; const mainVideo = container.querySelector(".as-ARwF"); const posterVideo = container.querySelector(".as-QbKU"); const controlsVideo = container.querySelector(".as-HgPt"); const timelineVideo = container.querySelector(".as-LmRK"); const progressBarVideo = container.querySelector(".as-BCyq"); const volumeUseVideo = container.querySelector(".as-XvhQ"); const volumeSliderVideo = container.querySelector(".as-XDAb"); const currentTimeVideo = container.querySelector( ".as-TdDP" ); const durationVideo = container.querySelector(".as-VftG"); const playPauseBtnVideo = container.querySelector( ".as-QvLD" ); const playPauseUseVideo = container.querySelector( ".as-RTGV" ); const speedBtnVideo = container.querySelector(".as-WRaG"); const speedOptionsVideo = container.querySelector( ".as-LxrA" ); const parentVideo = container.querySelector(".as-EeoR"); const fullScreenBtnVideo = container.querySelector(".as-DsEp"); const writeTimeVideo = container.querySelector(".as-HpKX"); const pipBtnContainerVideo = container.querySelector(".as-EQzK"); const pipBtnVideo = container.querySelector(".as-EQzK svg"); const volumeBtnContainerVideo = container.querySelector(".as-KyYW"); const volumeBtnVideo = container.querySelector(".as-KyYW svg"); let timer; const resizeObserver = new ResizeObserver(entry => { const widthVideo = entry[0].contentRect.width; if (volumeSliderVideo) { if (widthVideo < 500) { volumeSliderVideo.style.display = 'none'; } else { volumeSliderVideo.style.display = ''; } } if (writeTimeVideo) { if (widthVideo < 400) { writeTimeVideo.style.display = 'none'; } else { writeTimeVideo.style.display = ''; } } if (speedBtnVideo) { if (widthVideo < 300) { speedBtnVideo.style.display = 'none'; } else { speedBtnVideo.style.display = ''; } } if (pipBtnContainerVideo) { if (widthVideo < 220) { pipBtnContainerVideo.style.display = 'none'; } else { pipBtnContainerVideo.style.display = ''; } } if (volumeBtnContainerVideo) { if (widthVideo < 180) { volumeBtnContainerVideo.style.display = 'none'; } else { volumeBtnContainerVideo.style.display = ''; } } }); resizeObserver.observe(container); mainVideo.volume = 0.0; if (mainVideo && controlsVideo) { const hideControls = () => { if (mainVideo.paused) return; timer = setTimeout(() => { controlsVideo.classList.remove("as-ARwF-show-controls"); }, 2000); }; hideControls(); container.addEventListener("mousemove", () => { controlsVideo.classList.add("as-ARwF-show-controls"); clearTimeout(timer); hideControls(); }); } const formatTime = (time) => { let seconds = Math.floor(time % 60), minutes = Math.floor(time / 60) % 60, hours = Math.floor(time / 3600); seconds = seconds < 10 ? `0${seconds}` : seconds; minutes = minutes < 10 ? `0${minutes}` : minutes; hours = hours < 10 ? `0${hours}` : hours; if (hours == 0) { return `${minutes}:${seconds}`; } return `${hours}:${minutes}:${seconds}`; }; if (timelineVideo) { timelineVideo.addEventListener("mousemove", (e) => { let timelineWidth = timelineVideo.clientWidth; let offsetX = e.offsetX; let percent = Math.floor( (offsetX / timelineWidth) * mainVideo.duration ); const progressTime = timelineVideo.querySelector("span"); offsetX = offsetX < 20 ? 20 : offsetX > timelineWidth - 20 ? timelineWidth - 20 : offsetX; progressTime.style.left = `${offsetX}px`; progressTime.innerText = formatTime(percent); }); } if (timelineVideo) { timelineVideo.addEventListener("click", (e) => { let timelineWidth = timelineVideo.clientWidth; mainVideo.currentTime = (e.offsetX / timelineWidth) * mainVideo.duration; }); } if (mainVideo && progressBarVideo && currentTimeVideo) { mainVideo.addEventListener("timeupdate", (e) => { let { currentTime, duration } = e.target; let percent = (currentTime / duration) * 100; progressBarVideo.style.width = `${percent}%`; currentTimeVideo.innerText = formatTime(currentTime); }); } if (mainVideo && durationVideo) { mainVideo.addEventListener("loadeddata", () => { durationVideo.innerText = formatTime(mainVideo.duration); }); } if (mainVideo && volumeBtnVideo && volumeUseVideo && volumeSliderVideo) { volumeBtnVideo.addEventListener("click", () => { if (mainVideo.volume === 0) { mainVideo.muted = false; mainVideo.volume = 0.5; volumeUseVideo.setAttribute("href", "#appsections-icon-sound"); } else { mainVideo.muted = true; mainVideo.volume = 0.0; volumeUseVideo.setAttribute("href", "#appsections-icon-muted"); } volumeSliderVideo.value = mainVideo.volume; }); } if (mainVideo && volumeSliderVideo && volumeUseVideo) { volumeSliderVideo.addEventListener("input", (e) => { mainVideo.volume = e.target.value; if (e.target.value == 0) { mainVideo.muted = true; return volumeUseVideo.setAttribute("href", "#appsections-icon-muted"); } mainVideo.muted = false; volumeUseVideo.setAttribute("href", "#appsections-icon-sound"); }); } if (mainVideo && speedOptionsVideo) { speedOptionsVideo.querySelectorAll("li").forEach((option) => { option.addEventListener("click", () => { mainVideo.playbackRate = option.dataset.speed; speedOptionsVideo.querySelector(".active").classList.remove("active"); option.classList.add("active"); speedOptionsVideo.classList.remove("as-LxrA-show"); }); }); } if (!Shopify.designMode) { if (fullScreenBtnVideo) { fullScreenBtnVideo.addEventListener("click", () => { if (!document.fullscreenElement) { mainVideo.style.objectFit = 'contain'; if (container.requestFullscreen) { container.requestFullscreen(); } else if (container.webkitRequestFullscreen) { container.webkitRequestFullscreen(); } else if (container.mozRequestFullScreen) { container.mozRequestFullScreen(); } else if (container.msRequestFullscreen) { container.msRequestFullscreen(); } } else { mainVideo.style.objectFit = ''; if (document.exitFullscreen) { document.exitFullscreen(); } else if (document.webkitExitFullscreen) { document.webkitExitFullscreen(); } else if (document.mozCancelFullScreen) { document.mozCancelFullScreen(); } else if (document.msExitFullscreen) { document.msExitFullscreen(); } } }); } if (fullScreenBtnVideo) { document.addEventListener("fullscreenchange", () => { container.classList.toggle( "as-DsEp", document.fullscreenElement ); parentVideo.classList.toggle( "as-EeoR-fullscreen", ); }); } } if (mainVideo && posterVideo) { posterVideo.addEventListener("click", function () { posterVideo.classList.add("as-GgKA"); mainVideo.play(); }); } if (speedBtnVideo && speedOptionsVideo) { speedBtnVideo.addEventListener("click", () => speedOptionsVideo.classList.toggle("as-LxrA-show") ); } if (mainVideo && pipBtnVideo) { pipBtnVideo.addEventListener("click", () => mainVideo.requestPictureInPicture() ); } if (mainVideo && playPauseUseVideo) { mainVideo.addEventListener("play", () => playPauseUseVideo.setAttribute("href", "#appsections-icon-pause") ); } if (mainVideo && playPauseUseVideo) { mainVideo.addEventListener("pause", () => playPauseUseVideo.setAttribute("href", "#appsections-icon-play") ); } if (mainVideo && playPauseBtnVideo) { playPauseBtnVideo.addEventListener("click", () => mainVideo.paused ? mainVideo.play() : mainVideo.pause() ); } if (blockType == "blo") { if (mainVideo) { mainVideo.addEventListener("click", () => mainVideo.paused ? mainVideo.play() : mainVideo.pause() ); } } if (timelineVideo && progressBarVideo && mainVideo) { const draggableprogressBarVideo = (e) => { let timelineWidth = timelineVideo.clientWidth; progressBarVideo.style.width = `${e.offsetX}px`; mainVideo.currentTime = (e.offsetX / timelineWidth) * mainVideo.duration; currentTimeVideo.innerText = formatTime(mainVideo.currentTime); }; timelineVideo.addEventListener("mousedown", () => timelineVideo.addEventListener("mousemove", draggableprogressBarVideo) ); document.addEventListener("mouseup", () => timelineVideo.removeEventListener("mousemove", draggableprogressBarVideo) ); } }); }; let scrollListener = null; let resizeListener = null; function initParallaxEffect() { const parallaxElements = document.querySelectorAll('.as-CDZn'); var attribute = isMobile ? 'mob' : 'desk'; if (scrollListener) { window.removeEventListener('scroll', scrollListener); } if (resizeListener) { window.removeEventListener('resize', resizeListener); } parallaxElements.forEach(parallaxElement => { const widthPercentage = parseFloat(parallaxElement.getAttribute(`appsections-parallax-width-${attribute}`)) || 150; const orientationX = parallaxElement.getAttribute(`appsections-parallax-orientation-x-${attribute}`) || 'left'; const orientationY = parallaxElement.getAttribute(`appsections-parallax-orientation-y-${attribute}`) || 'up'; const maxTransition = parseFloat(parallaxElement.getAttribute(`appsections-parallax-transition-${attribute}`)) || 50; createParallaxEffect(parallaxElement, { widthPercentage: widthPercentage, orientationX: orientationX, orientationY: orientationY, maxTransition: maxTransition }); }); } function createParallaxEffect(targetElement, configuration) { let previousTranslateX = -1; let previousTranslateY = -1; let previousPercentage = -1; function initialize() { calculateElementMetrics(); initScroll(); } function calculateElementMetrics() { const parentElement = targetElement.parentElement; if (parentElement) { const parentBoundingRect = parentElement.getBoundingClientRect(); elementHeight = parentBoundingRect.height; elementWidth = parentBoundingRect.width; } else { console.warn("Parent element not found"); return; } const boundingRect = targetElement.getBoundingClientRect(); elementTopOffset = boundingRect.top + window.scrollY; elementBottomOffset = elementTopOffset + elementHeight; const targetElementWidth = (elementWidth * configuration.widthPercentage) / 100; maxRangeX = targetElementWidth - elementWidth; const targetElementHeight = targetElement.clientHeight; maxRangeY = targetElementHeight - elementHeight; } function initScroll() { scrollListener = handleScroll; resizeListener = calculateElementMetrics; window.addEventListener('scroll', scrollListener); window.addEventListener('resize', resizeListener); } function handleScroll() { const translateValues = calculateTranslateValues(); if (translateValues !== false) { executeAnimation(translateValues); } } function calculateTranslateValues() { const scrollPosition = window.scrollY; const windowHeight = window.innerHeight; let percentage = ((windowHeight + scrollPosition - elementTopOffset) / (windowHeight + elementHeight)) * 100; percentage = Math.min(100, Math.max(0, percentage)); if (configuration.maxTransition && percentage > configuration.maxTransition) { percentage = configuration.maxTransition; } if (previousPercentage === percentage) { return false; } previousPercentage = percentage; const translateY = ((percentage / 100) * maxRangeY - maxRangeY / 2).toFixed(0); const translateX = ((percentage / 100) * maxRangeX - maxRangeX / 2).toFixed(0); if (previousTranslateX === translateX && previousTranslateY === translateY) { return false; } previousTranslateX = translateX; previousTranslateY = translateY; return { translateX, translateY }; } function executeAnimation({ translateX, translateY }) { let finalTranslateY = '0px'; let finalTranslateX = '0px'; if (configuration.orientationY === 'up') { finalTranslateY = `${-translateY}px`; } else if (configuration.orientationY === 'down') { finalTranslateY = `${translateY}px`; } if (configuration.orientationX === 'left') { finalTranslateX = `${-translateX}px`; } else if (configuration.orientationX === 'right') { finalTranslateX = `${translateX}px`; } const transformCSS = `translate(${finalTranslateX}, ${finalTranslateY})`; targetElement.style.transform = transformCSS; } let elementHeight, elementWidth, elementTopOffset, elementBottomOffset, maxRangeY, maxRangeX; initialize(); } return { init, refresh, resize }; })(); if (document.readyState !== 'loading') { AppSectionsJS.init(); } else { document.addEventListener('DOMContentLoaded', function () { AppSectionsJS.init(); }); } document.addEventListener("shopify:section:load", function() { AppSectionsJS.refresh(); }); window.addEventListener("resize", function() { AppSectionsJS.resize(); });